"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-—á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telethon (user session).
"""
import re
from datetime import datetime, timedelta
from typing import List, Dict
from telethon.tl.types import User
from telethon import TelegramClient
from src.config.config import load_config

config = load_config()

API_ID = config['TELEGRAM_API_ID']
API_HASH = config['TELEGRAM_API_HASH']
PHONE = config['TELEGRAM_PHONE']
SESSION_NAME = config['TELEGRAM_SESSION_NAME']
DAY_OFFSET = config['DAY_OFFSET']
IGNORED_SENDER_IDS = config['IGNORED_SENDER_IDS']
IGNORED_PREFIXES = ['/start', '/help', '/telegram', '/command', 'üéÜ–î–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å']


def get_telegram_client():
    return TelegramClient(SESSION_NAME, API_ID, API_HASH)


async def get_messages(chat_id_or_username: str, day_offset: int = DAY_OFFSET) -> list[dict]:
    since = datetime.now() - timedelta(days=day_offset)
    messages = []

    client = get_telegram_client()
    await client.start(phone=PHONE)

    # –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
    entity = await find_entity(client, chat_id_or_username)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    async for msg in client.iter_messages(entity):
        if msg.date.replace(tzinfo=None) < since:
            break
        if msg.text and not should_skip_message(msg):
            messages.insert(0, {
                'id': msg.id,
                'date': msg.date.isoformat(),
                'username': get_formatted_username(msg.sender),
                'reply_to': msg.reply_to_msg_id,
                'text': msg.text
            })

    await client.disconnect()
    return messages


async def get_messages_tree(chat_id_or_username: str, day_offset: int = DAY_OFFSET) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏–Ω–µ–π–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏–º–∏ –∏–µ—Ä–∞—Ä—Ö–∏—é.

    Args:
        chat_id_or_username: ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞.
        day_offset: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        –°—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    messages = await get_messages(chat_id_or_username, day_offset)

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if not messages:
        return ""

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
    messages_dict = {msg['id']: {**msg, 'children': []} for msg in messages}

    # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    root_messages = []

    # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    for msg_id, msg_data in messages_dict.items():
        reply_to = msg_data['reply_to']
        if reply_to and reply_to in messages_dict:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –ø–æ—Ç–æ–º–∫–∞
            messages_dict[reply_to]['children'].append(msg_data)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç reply_to –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            root_messages.append(msg_data)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    root_messages.sort(key=lambda x: x['date'])

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–º–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
    for msg in messages_dict.values():
        msg['children'].sort(key=lambda x: x['date'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–∏–Ω–µ–π–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    def format_message(msg, indent: int = 0) -> str:
        result = ["  " * indent + f"{msg['username']}: {msg['text']}"]
        for child in msg['children']:
            result.append(format_message(child, indent + 1))
        return "\n".join(result)

    result = [format_message(msg) for msg in root_messages]
    print(f"Built text with {len(result)} root messages")
    return "\n".join(result)


def should_skip_message(msg) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if msg.sender_id in IGNORED_SENDER_IDS:
        return True
    if msg.fwd_from:
        fwd_sender_id = (getattr(msg.fwd_from.from_id, 'user_id', None)
                         or getattr(msg.fwd_from.from_id, 'channel_id', None))
        if fwd_sender_id in IGNORED_SENDER_IDS:
            return True
    text = (msg.text or "").strip()
    if not text:
        return True
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç-–∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å @telegram
    if text.startswith('/') or re.search(r'@\w*telegram\w*', text, re.IGNORECASE):
        return True

    return False


async def find_entity(client, chat_id_or_username):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ get_entity
    try:
        return await client.get_entity(chat_id_or_username)
    except (ValueError, TypeError):
        pass

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äî –∏—â–µ–º –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∏–∞–ª–æ–≥–∞–º (–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
    async for dialog in client.iter_dialogs():
        if (str(dialog.id) == str(chat_id_or_username)
                or dialog.name == chat_id_or_username
                or getattr(dialog.entity, 'username', None) == chat_id_or_username):
            return dialog.entity

    raise ValueError(f"–ß–∞—Ç —Å id/username '{chat_id_or_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤!")


def get_formatted_username(sender: User) -> str:
    if sender.username:
        return f"@{sender.username}"
    if sender.first_name and sender.last_name:
        return f"{sender.first_name} {sender.last_name}".strip()
    return sender.first_name or "Unknown"


async def get_list_chats() -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id, name, username) –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞.
    """
    client = get_telegram_client()
    await client.start(phone=PHONE)

    chats = []
    async for dialog in client.iter_dialogs():
        chat_info = {
            "id": dialog.id,
            "name": dialog.name,
            "username": getattr(dialog.entity, 'username', None)
        }
        chats.append(chat_info)

    await client.disconnect()

    return chats
