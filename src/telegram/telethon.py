"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-—á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telethon (user session).
"""
import re
from datetime import datetime, timedelta
from typing import List, Dict
from telethon import TelegramClient
from src.config.config import load_config

config = load_config()

API_ID = int(config['TELEGRAM_API_ID'])
API_HASH = config['TELEGRAM_API_HASH']
PHONE = config['TELEGRAM_PHONE']
SESSION_NAME = config['TELEGRAM_SESSION_NAME']
DAY_OFFSET = config['DAY_OFFSET']
IGNORED_PREFIXES = ['/start', '/help', '/telegram', '/command', 'üéÜ–î–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å']
IGNORED_SENDER_IDS = [177224227]


def get_telegram_client():
    return TelegramClient(SESSION_NAME, API_ID, API_HASH)


def should_skip_message(msg) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¥–≤–∏–∂, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ #–ø–æ–≤–µ—Å—Ç–∫–∞.
    """
    if msg.sender_id in IGNORED_SENDER_IDS:
        return True
    text = (msg.text or "").strip()
    if not text:
        return True

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç-–∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å @telegram
    if text.startswith('/') or re.search(r'@\w*telegram\w*', text, re.IGNORECASE):
        return True

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –∏–ª–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞ (–º–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(text) < 10 and any(c in text for c in 'üéÜüòéüëçüòÇ'):
        return True

    # –í—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ #–ø–æ–≤–µ—Å—Ç–∫–∞
    if '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è' in text.lower() or '#–ø–æ–≤–µ—Å—Ç–∫–∞' in text.lower():
        return False

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–π, –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ
    has_nick = '@' in text
    has_reaction = bool(getattr(msg, 'reactions', None))
    has_reply = bool(msg.reply_to_msg_id)
    is_long = len(text) >= 10

    return not (has_nick or has_reaction or has_reply or is_long)


async def get_messages(chat_id_or_username: str, day_offset: int = DAY_OFFSET) -> list[dict]:
    since = datetime.now() - timedelta(days=day_offset)
    messages = []

    client = get_telegram_client()
    await client.start(phone=PHONE)

    # –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
    entity = None
    async for dialog in client.iter_dialogs():
        if (str(dialog.id) == str(chat_id_or_username)
                or dialog.name == chat_id_or_username
                or getattr(dialog.entity, 'username', None) == chat_id_or_username):
            entity = dialog.entity
            break

    if entity is None:
        await client.disconnect()
        raise ValueError(f"–ß–∞—Ç —Å id/username '{chat_id_or_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤!")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    async for msg in client.iter_messages(entity):
        if msg.date.replace(tzinfo=None) < since:
            break
        sender = msg.sender
        username = getattr(sender, 'username', None)

        if username:
            formatted_username = f"@{username}"
        else:
            first_name = getattr(sender, 'first_name', '')
            last_name = getattr(sender, 'last_name', '')
            formatted_username = f"{first_name} {last_name}".strip()
        if msg.text and not should_skip_message(msg):
            messages.insert(0, {
                'id': msg.id,
                'date': msg.date.isoformat(),
                'username': formatted_username,
                'reply_to': msg.reply_to_msg_id,
                'text': msg.text
            })

    await client.disconnect()
    return messages


async def get_list_chats() -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id, name, username) –≤ –≤–∏–¥–µ JSON-–æ–±—ä–µ–∫—Ç–∞.
    """
    client = get_telegram_client()
    await client.start(phone=PHONE)

    chats = []
    async for dialog in client.iter_dialogs():
        chat_info = {
            "id": dialog.id,
            "name": dialog.name,
            "username": getattr(dialog.entity, 'username', None)
        }
        chats.append(chat_info)

    await client.disconnect()

    return chats
