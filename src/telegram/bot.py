import io
import json
from aiogram.types import BufferedInputFile, BotCommand
from src.config.config import load_config
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from src.telegram.telethon_client import get_list_chats

# –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é Telegram
BOT_COMMANDS = [
    BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
    BotCommand(command="help", description="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
    BotCommand(command="list_chats_json", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ JSON"),
]

async def run_bot():
    bot = Bot(token=load_config().get('BOT_TOKEN'))
    dp = Dispatcher()
    config = load_config()
    OWNER_ID = config.get('TELEGRAM_OWNER_ID')

    def is_owner(message: types.Message) -> bool:
        return message.from_user.id == OWNER_ID

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram-–∫–ª–∏–µ–Ω—Ç–∞
    await bot.set_my_commands(BOT_COMMANDS)

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        if not is_owner(message):
            return
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —á–∞—Ç–∞. –ü—Ä–æ—Å—Ç–æ –∂–¥–∏ –æ—Ç—á—ë—Ç–æ–≤!\n/help ‚Äî –ø–æ–º–æ—â—å.")

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        if not is_owner(message):
            return
        await message.answer(
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/auth ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telethon\n/list_chats_json ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ JSON")

    @dp.message(Command("list_chats_json"))
    async def cmd_list_chats_json(message: types.Message):
        if not is_owner(message):
            return
        temp_message = await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç –ø–æ —á–∞—Ç–∞–º, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats = await get_list_chats()
        json_text = json.dumps(chats, ensure_ascii=False, indent=2)

        # –°–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –¥–ª—è JSON-—Ñ–∞–π–ª–∞
        buffer = io.BytesIO(json_text.encode("utf-8"))
        buffer.name = "chat_list.json"
        await message.answer_document(BufferedInputFile(buffer.read(), filename=buffer.name))

        await temp_message.delete()

    await dp.start_polling(bot)
