"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ Telegram-—á–∞—Ç —á–µ—Ä–µ–∑ aiogram (Bot API).
"""
import html
from aiogram import Bot
from aiogram.enums import ParseMode
from datetime import datetime

from src.config.config import load_config

config = load_config()
BOT_TOKEN = config['BOT_TOKEN']


def escape_html(text: str) -> str:
    return html.escape(text)


def format_report(report_json: dict) -> str:
    parts = []

    # –®–∞–ø–∫–∞ —Å –¥–∞—Ç–æ–π
    today = datetime.now().strftime('%d.%m.%Y')
    parts.append(f"<b>üí¨ –ò—Ç–æ–≥–∏ —á–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî {today}</b>\n")

    # –í–∞–∂–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    if report_json.get('main_fragments'):
        parts.append("üìä <b>–ß—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ:</b>")
        for i, item in enumerate(report_json['main_fragments'], start=1):
            parts.append(f"{i}. {escape_html(item)}")
        parts.append("")

    # –§–∞–∫–∞–ø—ã –∏ –≤–∑–±–µ—Å–∏–≤—à–µ–µ
    if report_json.get('failures_and_rage'):
        parts.append("üí• <b>–û –Ω–∞–±–æ–ª–µ–≤—à–µ–º:</b>")
        for i, item in enumerate(report_json['failures_and_rage'], start=1):
            parts.append(f"{i}. {escape_html(item)}")
        parts.append("")

    # –¢–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É
    if report_json.get('topics_to_discuss'):
        parts.append("üß® <b>–¢–µ–º—ã –¥–ª—è –Ω—ã—Ç–∏–Ω–≥–∞:</b>")
        for i, item in enumerate(report_json['topics_to_discuss'], start=1):
            parts.append(f"{i}. {escape_html(item)}")
        parts.append("")

    hashtags = ' '.join(f"#{hashtag}" for hashtag in config['HASHTAGS'])
    parts.append(f"{hashtags}\n")

    return '\n'.join(parts)


async def send_report(report_json: dict, chat_id: str):
    bot = Bot(token=BOT_TOKEN)
    try:
        await bot.send_message(chat_id, format_report(report_json), parse_mode=ParseMode.HTML)
    finally:
        await bot.session.close()
